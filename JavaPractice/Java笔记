Java 笔记

*Java 对大小写敏感。

* /* ... */ 注释不能嵌套，编译器只能识别一对。

* Java 整型范围
	int    4 byte  -2 147 483 647 ~ 2 147 483 647
	short  2 byte  -32 768 ~ 32 767 
	long   8 byte  -9 223 372 036 854 775 808 ~ 9 223 372 036 854 775 807
	byte   1 byte  -128 ~ 127

	long -> 4 000 000 000L(l)
	十六进制 -> 0xABC
	八进制 -> 010(十进制上的8)
	
* Java 没有任何无符号类型(unsigned type)

* Java 浮点类型范围
	float  4 byte  ≈±3.402 823 47E + 38F(有效位数为6~7位)
	double 8 byte  ≈±1.797 693 134 862 315 70E + 308(有效位数15位)

* Java 中表示溢出和出错情况的三个特殊浮点数值：
	正无穷大 Double.POSITIVE_INFINITY
	负无穷大 Double.NEGATIVE_INFINITY
	NaN(不是一个数字) Double.NaN

	@ 注意，检测一个特定值是否为非数字不能用if (x == Doule.NaN)，所有非数值的值都认为是不相同的
	只能用if (Doule.isNaN(x)) 这样的方式来检测

* Java 中，整型值与 boolean 值不能相互转化

* 以 final 定义常量

* int/0 = Exception
  double/0 = (NaN or 无穷大)

* Class Math Methods:
	Math.pow(x, a) == x^a
	Math.sin()
	Math.cos()
	Math.tan()
	Math.atan()
	Math.atan2()
	Math.exp()
	Math.log()
	
	Math.PI == π
	Math.E == e

	* 在JDK5.0开始，在源文件顶部加上import static java.lang.Math.*;就可以不用添加前缀Math.

* 数值类型之间的转换
			   char
			    ↓
byte → short → int → long
                |  ↘  |
            float → double
 
	* 其中带有箭头的转换是无损精度的转换
	  | 转换是会损失一定的精度，并且long也可以转换成float，也会损失一定的精度

* double x = 9.997;
  int a = (int)x; // a == 9
  int b = (int)Math.round(x); // b == 10, Math.round返回值是long类型，故仍需要强制类型转换

* 运算符优先级
	[] . ()（方法调用）		从左向右
	! ~ ++ -- +（一元运算） -（一元运算） () （强制类型转换） new	*从右向左
	* / %					从左向右
	+ -						从左向右
	<< >> >>>				从左向右
	< <= > >= instanceof	从左向右
	== !=					从左向右
	&						从左向右
	^						从左向右
	|						从左向右
	&&						从左向右
	||						从左向右
	?:						*从右向左
	= += -= *= /= %= &= |= ^= <<= >>= >>>=	*从右向左


** 字符串 **

* java.lang.string (P 50)
	char charAt(int index)
	int codePointAt(int index)
	int offsetByCodePoints(int startIndex, int cpCount)
	int compareTo(String other) //return [-1 | 0 | 1]
	boolean endsWith(String suffix)
	boolean equals(Object other)
	boolean equalsIgnoreCase(String other)
	int indexOf(String str) // return -1 | first index of the str
	int indexOf(String str, int fromIndex)
	int indexOf(int cp)
	int indexOf(int cp, int fromIndex)
	int lastIndexOf(String str) // return -1 | last index of the str
	int lastIndexOf(String str, int fromIndex)
	int lastIndexOf(int cp)
	int lastIndexOf(int cp, int fromIndex)
	int length()	
	int codePointCount(int startIndex, int endIndex)
	String replace(CharSequence oldString)
	boolean startsWith(String prefix)
	String substring(int beginIndex)
	String substring(int beginIndex, int endIndex)
	String toLowerCase()
	String toUpperCase()
	String trim() // 返回一个新字符串，这个字符串将删除了原始字符串头部和尾部的空格

* 如果需要由较短的字符串构建字符串，则使用StringBuilder类可以节约空间和时间
例：
	StringBuilder builder = new StringBuilder();
	// 每次需要添加一部分内容时，就调用append方法
	builder.append(ch); // append a single character
	builder.append(str); // append a string
	// 在需要构建字符串时就调用toString方法，将得到一个String对象
	String completedString = builder.toString();

* java.lang.StringBuilder (P 53)
	StringBuilder()
	int length()
	StringBuilder append(String str)
	StringBuilder append(char c)
	StringBuilder appendCodePoint(int cp)
	void setCharAt(int i, char c)
	StringBuilder insert(int offset, String str) // 在offset的位置插入一个字符串并返回this
	StringBuilder insert(int offset, char c)
	StringBuilder delete(int startIndex, int endIndex)
	String toString()
	

** 输入输出 **

* Scanner 类
	Scanner scan = new Scanner(System.in);

	nextLine() | next() 区别：
		nextLine() 读取一行内容，以换行符作结束标志
		next() 读取一个单词的内容，以空白符作结束标志

* 因为Scanner类从控制台读取数据是可见的，所以读取密码时不能使用Scanner类，而要使用Console类
例：
	Console cons = System.console();
	String username = cons.readLine("User name: ");
	char[] passwd = cons.readPassword("Password: ");
	// 为了安全起见，返回的密码存放在一维字符数组中，而不是字符串中，在对密码进行处理之后，应该马上用一个填充值覆盖数组元素。
	// Console对象处理输入不如Scanner方便，每次只能读取一行输入，没有读取一个单词或一个数值的方法。

* java.util.Scanner (P 56)
	Scanner (InputStream in)
	String nextLine()
	String next()
	int nextInt()
	double nextDouble()
	boolean hasNext()
	boolean hasNextInt()
	boolean hasNextDouble()

* java.lang.System (P 56)
	static Console console()
	
* java.io.Console (P 56)
	static char[] readPassword(String prompt, Object...args)
	static String readLine(String prompt, Object...args)
	// args参数可以用来提供输入格式。

* 用于printf的转换符
	d			十进制整数				159
	x			十六进制整数			9f
	o			八进制整数				237
	f			定点浮点数				15.9
	e			指数浮点数				15.9e+01
	g			通用浮点数				——
	a			十六进制浮点数			0x1.fccdp3
	s			字符串					"Hello"
	c			字符					'h'
	b			布尔					True
	h			散列码					42628b2
	tx			日期时间		
	%			百分号					%
	n			与平台有关的行分隔符	--

* 用于printf的标志
	+					打印正数和负数的符号	+3333.33
	空格				在正数之前添加空格		| 3333.33|
	0					在数字前面补0			003333.33
	-					左对齐					|3333.33 |
	(					将负数括在括号内		(3333.33)
	,					添加分组分隔符			3,333.33
	#(对于f格式)		包含小数点				3,333.
	#(对于x或0格式)		添加前缀0x或0			0xcafe
	$					给定被格式化的参数索引	159 9F
						例如:%1$d, %1$x将以十
						进制和十六进制打印第一
						个参数
	<					格式化前面说明的数值,	159 9F
						例如:%d%<x以十进制和
						十六进制打印同一个数值






