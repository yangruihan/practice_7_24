
ROS 实现了几种不同的通信方式：
1.基于同步RPC样式通信的服务（services）
2.基于异步流媒体数据的话题（topics）机制
3.用于数据存储的参数服务器（Parameter Server）

-----------------------------------------------
ROS 基本概念：

ROS has three levels of concepts:
	1.the Filesystem level (文件系统)
	2.the Computation Graph level(图形计算)
	3.the Community level(团体)
ROS has two types of names:
	1.Package Resource Names
	2.Graph Resource Names

1.ROS Filesystem Level:

	Packages:
		Packages are the main unit for organizing software in ROS. 
		A Package may contain: (1)ROS runtime processes(nodes)
							   (2)a ROS-dependent library
							   (3)datasets
							   (4)configuration files
							   (5)anything else that is usefully organized together. 
		Packages 是最基本的构造项和发表项

	Metapackages:
		Metapackages are specialized Packages which only serve to represent a group of related other packages.

	Package Manifests:
		Manifests(package.xml) provide metadata about a package, including its name, version, description, license information, dependencies, and other meta information like exported packages.
		http://www.ros.org/reps/rep-0127.html

	Repositories:
		A collection of packages which share a common VCS system.

	Message(msg)types:
		Message descriptions, stored in my_package/msg/MyMessageType.msg, define the data structures for messages sent in ROS.

	Service(srv)types:
		Service descriptions, stored in my_package/srv/MyServiceType.srv, define the request and response data structures for services in ROS.


2.ROS Computation Graph Level:

	The Computation Graph is the peer-to-peer network of ROS processes that are processing data together. The basic Computation Graph concepts of ROS are (nodes, Master, Parameter Server, messages, services, topics, and bags), all of which provide data to the Graph in different ways.

	These concepts are implemented in the ros_comm repository	http://wiki.ros.org/ros_comm

	Nodes:
		Nodes are processes that perform computation. ROS is designed to be modular at a fine-grained scale; a robot control system usually comprises many nodes. 
		一个节点控制机器人做一项任务，比如一个节点控制机器人的底盘行走，另一个节点提供一个图形视角。
		A ROS node is written with the use of a ROS client library, such as roscpp or rospy.

	Master:
		The ROS Master provides name registration and lookup to the rest of the Computation Graph. Without the Master, nodes would not be able to find each other, exchange messages, or invoke services.

	Parameter Server:
		The Parameter Server allows data to be stored by key in a central location. It's currently part of the Master.

	Messages:
		Nodes communicate with each other by passing messages. A message is simply a data structure, comprising typed field.
		Standard primitive types(integer, floating point, boolean, etc.) are supported, as are arrays of primitive types. Messages can include arbitrarily nested structures and arrays(much like C structs).

	Topics:
		Messages are routed via a transport system with pulish/subscribe semantics. A node sends out a message by publishing it to a given topic.The topic is a name that is used to identify the content of the message. A node that is interested in a certain kind of data will subscribe to the appropriate topic. There may be multiple concurrent publishers and subscribers for a single topic, and a single node may publish and/or subscribe to multiple topic.

	Services:
		The publish/subscribe model is a very flexible communication paradigm. but its many-to-many, one-way transport is not appropriate for request/reply interactions, which are often required in a distributed system.	

	Bags:
		Bags are a format for saving and playing back ROS message data. Bags are an important mechanism for storing data, such as sensor data, that can be difficult to collect but is necessary for developing and testing algorithms.


3.ROS Community Level:

	Distributions:
		ROS Distributions are collections of versioned stacks that you can install. Distributions play a similar role to Linux distributions: they make it easier to install a collection of software, and they also maintain consistent versions across a set of software.

	Repositories:
		ROS relies on a federated network of code repositories, where different institutions can develop and release their own robot software components.

	The ROS Wiki:
		The ROS community Wiki is the main forum for documenting information about ROS. Anyone can sign up for an account and contribute their own documentation, provide corrections or updates, write tutorials, and more.

	Bug Ticket System:
		http://wiki.ros.org/Tickets

	Mailing Lists:
		The ros-users mailing list is the primary communication channel about new updates to ROS, as well as a forum to ask questions about ROS software

	ROS Answers:
		A Q&A site for answering your ROS-related questions.

	Blog:
		The Willow Garage Blog provides regular updates, including photos and videos.

4.Names

	4.1 Graph Resource Names

		4.1.1 Valid Names
			A valid name has the following characteristics:
				1. First character is an alpha character([a-z|A-Z]), tilde(~) or forward slash(/)
				2.Subsequent characters can be alphanumeric([0-9|a-z|A-Z]), underscores(_), or forward slashes(/)

				Exception:base names(described below) cannot have forward slashes(/) or tildes(~) in them

		4.1.2 Resolving
			There are four types of Graph Resource Names in ROS:(base, relative, global, private), which have the following syntax:

				base
				relative/name
				/global/name
				~private/name

			Names with no namespace qualifiers whatsoever are base names. Base names are most frequently used to initialize the node name.

			Names that start with a "/" are global -- they are considered fully resolved. Global names should be avoided as much as possilble as they limit code protability.

			Names that start with a "~" are private. They convert the node's name into a namespace. For example, node1 in namespace /wg/ has the private namespace /wg/node1. Private names are useful for passing parameters to a specific node via the parameter server. 

			Here are some name resolution examples:

			Node 		Relative(default) 		Global 					Private
			/node1 		bar -> /bar 			/bar -> /bar			~bar -> /node1/bar
			/wg/node2	bar -> /wg/bar 			/bar -> /bar 			~bar -> /wg/node2/bar
			/wg/node3	foo/bar -> /wg/foo/bar	/foo/bar -> /foo/bar	~foo/bar -> /wg/node3/foo/bar

		4.1.3 Remapping
			Any name within a ROS Node can be remapped when the Node is launched at the command-line.


	4.2 Package Resource Names

		Package Resource Names are very simple: they are just the name of Package that the resource is in plus the name of the resource. For example, the name "std_msgs/String" refers to the "String" message type in the "std_msgs" Package.

		Some of the ROS-related files that may be referred to using Package Resource Names include:

			Message(msg) types
			Service(srv) types
			Node types

		4.2.1 Valid Names

			A ROS package cannot have special characters other than an underscore, and must start with an alphabetical character. A valid name has the following characteristics:

				1.First character is an alpha character([a-z|A-Z])
				2.Subsequent characters can be alphanumeric([0-9|a-z|A-Z]), underscores(_) or a forward slash(/)
				3.There is at most one forward slash('/').









































