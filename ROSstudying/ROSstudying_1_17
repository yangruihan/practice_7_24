
ROS 实现了几种不同的通信方式：
1.基于同步RPC样式通信的服务（services）
2.基于异步流媒体数据的话题（topics）机制
3.用于数据存储的参数服务器（Parameter Server）

-----------------------------------------------
ROS 基本概念：

ROS has three levels of concepts:
	1.the Filesystem level (文件系统)
	2.the Computation Graph level(图形计算)
	3.the Community level(团体)
ROS has two types of names:
	1.Package Resource Names
	2.Graph Resource Names

1.ROS Filesystem Level
	Packages:
		Packages are the main unit for organizing software in ROS. 
		A Package may contain: (1)ROS runtime processes(nodes)
							   (2)a ROS-dependent library
							   (3)datasets
							   (4)configuration files
							   (5)anything else that is usefully organized together. 
		Packages 是最基本的构造项和发表项

	Metapackages:
		Metapackages are specialized Packages which only serve to represent a group of related other packages.

	Package Manifests:
		Manifests(package.xml) provide metadata about a package, including its name, version, description, license information, dependencies, and other meta information like exported packages.
		http://www.ros.org/reps/rep-0127.html

	Repositories:
		A collection of packages which share a common VCS system.

	Message(msg)types:
		Message descriptions, stored in my_package/msg/MyMessageType.msg, define the data structures for messages sent in ROS.

	Service(srv)types:
		Service descriptions, stored in my_package/srv/MyServiceType.srv, define the request and response data structures for services in ROS.


2.ROS Computation Graph Level:
	The Computation Graph is the peer-to-peer network of ROS processes that are processing data together. The basic Computation Graph concepts of ROS are (nodes, Master, Parameter Server, messages, services, topics, and bags), all of which provide data to the Graph in different ways.

	These concepts are implemented in the ros_comm repository	http://wiki.ros.org/ros_comm

	Nodes:
		Nodes are processes that perform computation. ROS is designed to be modular at a fine-grained scale; a robot control system usually comprises many nodes. 
		一个节点控制机器人做一项任务，比如一个节点控制机器人的底盘行走，另一个节点提供一个图形视角。
		A ROS node is written with the use of a ROS client library, such as roscpp or rospy.

	Master:
		The ROS Master provides name registration and lookup to the rest of the Computation Graph. Without the Master, nodes would not be able to find each other, exchange messages, or invoke services.

	Parameter Server:
		The Parameter Server allows data to be stored by key in a central location. It's currently part of the Master.

	Messages:
		Nodes communicate with each other by passing messages. A message is simply a data structure, comprising typed field.











































